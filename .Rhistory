num_like = p_LA*A+p_LB*B+p_LC*C
num_Alike = p_LA*A
return(num_Alike/(A+B+C))
}
p_AL(0.8, 0.52, 0.48, 340, 185, 232)
p_Alike(0.8, 0.52, 0.48, 340, 185, 232)
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
p_AL <- function(p_LA, p_LB, p_LC, A, B, C){
p_L <- (p_LA*A+p_LB*B+p_LC*C)/(A+B+C)
p_A <- A/(A+B+C)
return(p_LA*p_A/p_L)
}
p_Alike <- function(p_LA, p_LB, p_LC, A, B, C){
num_like = p_LA*A+p_LB*B+p_LC*C
num_Alike = p_LA*A
return(num_Alike/num_like)
}
p_AL(0.8, 0.52, 0.48, 340, 185, 232)
p_Alike(0.8, 0.52, 0.48, 340, 185, 232)
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340,185,232))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(L == 0), replace = TRUE, prob = c(0.2, 0.8))
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340,185,232))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340/(340+185+232),185/(340+185+232),232/(340+185+232)))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=757, replace=TRUE, prob=c(340/757,185/757,232/757))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=757, replace=TRUE, prob=c(340/757,185/757,232/757))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = 340, replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = 185, replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = 232, replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=757, replace=TRUE, prob=c(340/757,185/757,232/757))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
P_AL(phone, L)
p_AL <- function(p_LA, p_LB, p_LC, A, B, C){
p_L <- (p_LA*A+p_LB*B+p_LC*C)/(A+B+C)
p_A <- A/(A+B+C)
return(p_LA*p_A/p_L)
}
p_AL(0.8, 0.52, 0.48, 340, 185, 232)
#The answer is same with part 3's.
p_AconL <- function(p_LA, p_LB, p_LC, A, B, C){
num_L = p_LA*A+p_LB*B+p_LC*C
num_AandL = p_LA*A
return(num_Alike/num_like)
}
p_AconL(0.8, 0.52, 0.48, 340, 185, 232)
p_AconL <- function(p_LA, p_LB, p_LC, A, B, C){
num_L = p_LA*A+p_LB*B+p_LC*C
num_AandL = p_LA*A
return(num_AandL/num_L)
}
p_AconL(0.8, 0.52, 0.48, 340, 185, 232)
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=757, replace=TRUE, prob=c(340/757,185/757,232/757))
L <- rep(NA, 1000000)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
P_AL(phone, L)
phone <- sample(c("A", "B", "C"), size=757, replace=TRUE, prob=c(340/757,185/757,232/757))
phone
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340,185,232))
phone
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340,185,232))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
P_AL(phone, L)
#set.seed(1000)
phone <- sample(c("A", "B", "C"), size=340+185+232, replace=TRUE, prob=c(340,185,232))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(0.2, 0.8))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(0.48, 0.52))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(0.52, 0.48))
P_AL <- function(phone, L){
return(mean(phone[L==1]=="A"))
}
P_AL(phone, L)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
return(mean(phone[L==1]=="A"))
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i = 0
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
print(mean(phone[L==1]=="A"))
}
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
p = list()
print(p)
p = list()
print(p)
p <- 1
print(p)
p = list()
print(p)
p <- 1
print(p)
p <- 2
print(p)
p = list()
print(p)
p <- append.(1)
p <- 1
p <- append(p, 2)
print(p)
p <- 1
p <- append(p, 2)
print(p)
p.type
p = list()
p <- append(p, 2)
print(p)
p = list()
p <- append(p, 1)
p <- append(p, 2)
print(p)
p = list()
p <- append(p, 1)
p <- append(p, 2)
print(p)
str(p)
p = list()
p.append(p, 1)
p = list()
p.app(p, 1)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
p <- list()
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
return(p)
}
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
p <- list()
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
mean(p)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
p <- 0
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
mean(p)
type(p)
str(p)
mean(p)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
#p <- 0
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
str(p)
mean(p)
str(p)
mean(p)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
p <- list()
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
str(p)
mean(p)
p[1]
mean(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)[1]
str(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)[1])
str(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
mean(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
sum(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
#p <- list()
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
str(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)[1])
str(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)[i] while i <= 100)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
p <- 0
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
p <- append(p, mean(phone[L==1]=="A"))
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
mean(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
sum(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))/100
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
while(i<iterations){
i <- i + 1
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, 340+185+232)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
if(i == 1){
p <- mean(phone[L==1]=="A")
}else{
p <- append(p, mean(phone[L==1]=="A"))
}
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
mean(MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232))
library(plotly)
while(i<10000){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
library(plotly)
i <- 0
while(i<10000){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
P_AL <- function(p_LA, p_LB, p_LC, A, B, C){
phone <- sample(c("A", "B", "C"), size=A+B+C, replace=TRUE, prob=c(A,B,C))
L <- rep(NA, A+B+C)
L[phone == "A"] <- sample(c(0, 1), size = sum(phone == "A"), replace = TRUE, prob = c(1-p_LA, p_LA))
L[phone == "B"] <- sample(c(0, 1), size = sum(phone == "B"), replace = TRUE, prob = c(1-p_LB, p_LB))
L[phone == "C"] <- sample(c(0, 1), size = sum(phone == "C"), replace = TRUE, prob = c(1-p_LC, p_LC))
return(mean(phone[L==1]=="A"))
}
P_AL(0.8, 0.52, 0.48, 340, 185, 232)
p_AL <- function(p_LA, p_LB, p_LC, A, B, C){
p_L <- (p_LA*A+p_LB*B+p_LC*C)/(A+B+C)
p_A <- A/(A+B+C)
return(p_LA*p_A/p_L)
}
p_AL(0.8, 0.52, 0.48, 340, 185, 232)
#The answer is similar to part 3's.
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
while(i<iterations){
i <- i + 1
if(i == 1){
p <- P_AL(p_LA, p_LB, p_LC, A, B, C)
}else{
p <- append(p, P_AL(p_LA, p_LB, p_LC, A, B, C))
}
}
return(p)
}
MCsim(100, 0.8, 0.52, 0.48, 340, 185, 232)
MCsim(1, 0.92, 0.48, 0.67, 610, 580, 330)
p_AL(0.92, 0.48, 0.67, 610, 580, 330)
library(plotly)
i <- 0
while(i<10){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(1:10,m)
fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Probability under different number of iterations ")
fig
library(plotly)
i <- 0
while(i<10){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(1:10,m)
print(simulation)
#fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
#fig <- fig %>% layout(title = "Probability under different number of iterations ")
#fig
library(plotly)
i <- 0
while(i<10){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(i = 1:10,m)
print(simulation)
fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Probability under different number of iterations ")
fig
library(plotly)
i <- 0
while(i<100){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(i = 1:100,m)
print(simulation)
fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Probability under different number of iterations ")
fig
library(plotly)
i <- 0
while(i<500){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(i = 1:500,m)
print(simulation)
fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Probability under different number of iterations ")
fig
library(plotly)
i <- 0
while(i<1000){
i <- i + 1
if(i == 1){
m <- mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232))
}else{
m <- append(m, mean(MCsim(i, 0.8, 0.52, 0.48, 340, 185, 232)))
}
}
simulation <- data.frame(i = 1:1000,m)
print(simulation)
fig <- plot_ly(simulation, x = ~i, y = ~m, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Probability under different number of iterations ")
fig
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
while(i<iterations){
i <- i + 1
if(i == 1){
p <- P_AL(p_LA, p_LB, p_LC, A, B, C)
}else{
p <- append(p, P_AL(p_LA, p_LB, p_LC, A, B, C))
}
}
return(p)
}
MCsim(1000, 0.8, 0.52, 0.48, 340, 185, 232)
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
while(i<iterations){
i <- i + 1
if(i == 1){
p <- P_AL(p_LA, p_LB, p_LC, A, B, C)
}else{
p <- append(p, P_AL(p_LA, p_LB, p_LC, A, B, C))
}
}
return(p)
}
MCsim(500, 0.8, 0.52, 0.48, 340, 185, 232)
mean(MCsim(500, 0.92, 0.48, 0.67, 610, 580, 330))
MCsim <- function(iterations, p_LA, p_LB, p_LC, A, B, C){
i <- 0
while(i<iterations){
i <- i + 1
if(i == 1){
p <- P_AL(p_LA, p_LB, p_LC, A, B, C)
}else{
p <- append(p, P_AL(p_LA, p_LB, p_LC, A, B, C))
}
}
return(p)
}
mean(MCsim(500, 0.8, 0.52, 0.48, 340, 185, 232))
MCsim(100, 0.92, 0.48, 0.67, 610, 580, 330)
mean(MCsim(500, 0.92, 0.48, 0.67, 610, 580, 330))
install.packages("DiagrammeR")
